on:
  push:
    branches:
      - master
  release:
    types: [created]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64-unknown-linux-musl, x86_64-apple-darwin]
        archive: [tar.gz, zip]
    steps:
      - uses: actions/checkout@v2

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Install target for ${{ matrix.target }}
        run: rustup target add ${{ matrix.target }}

      - name: Build project
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare binaries
        run: |
          mkdir -p release
          cp target/${{ matrix.target }}/release/zap ./release/
          if [ "${{ matrix.archive }}" = "tar.gz" ]; then
            tar -czvf release/zap-${{ matrix.target }}.tar.gz -C release zap
          else
            zip -j release/zap-${{ matrix.target }}.zip release/zap
          fi

      - name: Upload Release Asset
        uses: actions/upload-artifact@v2
        with:
          name: zap-${{ matrix.target }}
          path: release/*

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload Binaries to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release/*
          asset_name: zap-${{ matrix.target }}.${{ matrix.archive }}
          asset_content_type: application/octet-stream
